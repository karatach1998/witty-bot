title: Python Cookbook
location:
  extra:
    file_id: 1SvkQMYxPXcc8RZJ_aw1ADb1fXIKIawIV
  type: gdrive
parts:
- chapters:
  - end: 21
    start: 19
    title: 1.1. Unpacking a Sequence into Separate Variables
  - end: 23
    start: 21
    title: 1.2. Unpacking Elements from Iterables of Arbitrary Length
  - end: 25
    start: 23
    title: 1.3. Keeping the Last N Items
  - end: 26
    start: 25
    title: 1.4. Finding the Largest or Smallest N Items
  - end: 29
    start: 26
    title: 1.5. Implementing a Priority Queue
  - end: 30
    start: 29
    title: 1.6. Mapping Keys to Multiple Values in a Dictionary
  - end: 31
    start: 30
    title: 1.7. Keeping Dictionaries in Order
  - end: 33
    start: 31
    title: 1.8. Calculating with Dictionaries
  - end: 35
    start: 33
    title: 1.9. Finding Commonalities in Two Dictionaries
  - end: 36
    start: 35
    title: 1.10. Removing Duplicates from a Sequence while Maintaining Order
  - end: 38
    start: 36
    title: 1.11. Naming a Slice
  - end: 39
    start: 38
    title: 1.12. Determining the Most Frequently Occurring Items in a Sequence
  - end: 41
    start: 39
    title: 1.13. Sorting a List of Dictionaries by a Common Key
  - end: 42
    start: 41
    title: 1.14. Sorting Objects Without Native Comparison Support
  - end: 44
    start: 42
    title: 1.15. Grouping Records Together Based on a Field
  - end: 46
    start: 44
    title: 1.16. Filtering Sequence Elements
  - end: 47
    start: 46
    title: 1.17. Extracting a Subset of a Dictionary
  - end: 50
    start: 47
    title: 1.18. Mapping Names to Sequence Elements
  - end: 51
    start: 50
    title: 1.19. Transforming and Reducing Data at the Same Time
  - end: 55
    start: 51
    title: 1.20. Combining Multiple Mappings into a Single Mapping
  end: 55
  start: 19
  title: "Chapter\_1.\_Data Structures and Algorithms"
- chapters:
  - end: 56
    start: 55
    title: 2.1. Splitting Strings on Any of Multiple Delimiters
  - end: 58
    start: 56
    title: 2.2. Matching Text at the Start or End of a String
  - end: 60
    start: 58
    title: 2.3. Matching Strings Using Shell Wildcard Patterns
  - end: 63
    start: 60
    title: 2.4. Matching and Searching for Text Patterns
  - end: 64
    start: 63
    title: 2.5. Searching and Replacing Text
  - end: 65
    start: 64
    title: 2.6. Searching and Replacing Case-Insensitive Text
  - end: 66
    start: 65
    title: 2.7. Specifying a Regular Expression for the Shortest Match
  - end: 68
    start: 66
    title: 2.8. Writing a Regular Expression for Multiline Patterns
  - end: 70
    start: 68
    title: 2.9. Normalizing Unicode Text to a Standard Representation
  - end: 71
    start: 70
    title: 2.10. Working with Unicode Characters in Regular Expressions
  - end: 72
    start: 71
    title: 2.11. Stripping Unwanted Characters from Strings
  - end: 75
    start: 72
    title: 2.12. Sanitizing and Cleaning Up Text
  - end: 76
    start: 75
    title: 2.13. Aligning Text Strings
  - end: 79
    start: 76
    title: 2.14. Combining and Concatenating Strings
  - end: 82
    start: 79
    title: 2.15. Interpolating Variables in Strings
  - end: 83
    start: 82
    title: 2.16. Reformatting Text to a Fixed Number of Columns
  - end: 84
    start: 83
    title: 2.17. Handling HTML and XML Entities in Text
  - end: 87
    start: 84
    title: 2.18. Tokenizing Text
  - end: 96
    start: 87
    title: 2.19. Writing a Simple Recursive Descent Parser
  - end: 101
    start: 96
    title: 2.20. Performing Text Operations on Byte Strings
  end: 101
  start: 55
  title: "Chapter\_2.\_Strings and Text"
- chapters:
  - end: 102
    start: 101
    title: 3.1. Rounding Numerical Values
  - end: 105
    start: 102
    title: 3.2. Performing Accurate Decimal Calculations
  - end: 107
    start: 105
    title: 3.3. Formatting Numbers for Output
  - end: 108
    start: 107
    title: 3.4. Working with Binary, Octal, and Hexadecimal Integers
  - end: 110
    start: 108
    title: 3.5. Packing and Unpacking Large Integers from Bytes
  - end: 112
    start: 110
    title: 3.6. Performing Complex-Valued Math
  - end: 114
    start: 112
    title: 3.7. Working with Infinity and NaNs
  - end: 115
    start: 114
    title: 3.8. Calculating with Fractions
  - end: 118
    start: 115
    title: 3.9. Calculating with Large Numerical Arrays
  - end: 120
    start: 118
    title: 3.10. Performing Matrix and Linear Algebra Calculations
  - end: 122
    start: 120
    title: 3.11. Picking Things at Random
  - end: 124
    start: 122
    title: 3.12. Converting Days to Seconds, and Other Basic Time Conversions
  - end: 125
    start: 124
    title: "3.13. Determining Last Friday\u2019s Date"
  - end: 127
    start: 125
    title: 3.14. Finding the Date Range for the Current Month
  - end: 128
    start: 127
    title: 3.15. Converting Strings into Datetimes
  - end: 131
    start: 128
    title: 3.16. Manipulating Dates Involving Time Zones
  end: 131
  start: 101
  title: "Chapter\_3.\_Numbers, Dates, and Times"
- chapters:
  - end: 132
    start: 131
    title: 4.1. Manually Consuming an Iterator
  - end: 133
    start: 132
    title: 4.2. Delegating Iteration
  - end: 135
    start: 133
    title: 4.3. Creating New Iteration Patterns with Generators
  - end: 137
    start: 135
    title: 4.4. Implementing the Iterator Protocol
  - end: 138
    start: 137
    title: 4.5. Iterating in Reverse
  - end: 140
    start: 138
    title: 4.6. Defining Generator Functions with Extra State
  - end: 141
    start: 140
    title: 4.7. Taking a Slice of an Iterator
  - end: 143
    start: 141
    title: 4.8. Skipping the First Part of an Iterable
  - end: 145
    start: 143
    title: 4.9. Iterating Over All Possible Combinations or Permutations
  - end: 147
    start: 145
    title: 4.10. Iterating Over the Index-Value Pairs of a Sequence
  - end: 149
    start: 147
    title: 4.11. Iterating Over Multiple Sequences Simultaneously
  - end: 150
    start: 149
    title: 4.12. Iterating on Items in Separate Containers
  - end: 153
    start: 150
    title: 4.13. Creating Data Processing Pipelines
  - end: 154
    start: 153
    title: 4.14. Flattening a Nested Sequence
  - end: 156
    start: 154
    title: 4.15. Iterating in Sorted Order Over Merged Sorted Iterables
  - end: 159
    start: 156
    title: 4.16. Replacing Infinite while Loops with an Iterator
  end: 159
  start: 131
  title: "Chapter\_4.\_Iterators and Generators"
- chapters:
  - end: 162
    start: 159
    title: 5.1. Reading and Writing Text Data
  - end: 162
    start: 162
    title: 5.2. Printing to a File
  - end: 163
    start: 162
    title: 5.3. Printing with a Different Separator or Line Ending
  - end: 165
    start: 163
    title: 5.4. Reading and Writing Binary Data
  - end: 166
    start: 165
    title: "5.5. Writing to a File That Doesn\u2019t Already Exist"
  - end: 167
    start: 166
    title: 5.6. Performing I/O Operations on a String
  - end: 169
    start: 167
    title: 5.7. Reading and Writing Compressed Datafiles
  - end: 170
    start: 169
    title: 5.8. Iterating Over Fixed-Sized Records
  - end: 171
    start: 170
    title: 5.9. Reading Binary Data into a Mutable Buffer
  - end: 174
    start: 171
    title: 5.10. Memory Mapping Binary Files
  - end: 175
    start: 174
    title: 5.11. Manipulating Pathnames
  - end: 176
    start: 175
    title: 5.12. Testing for the Existence of a File
  - end: 178
    start: 176
    title: 5.13. Getting a Directory Listing
  - end: 179
    start: 178
    title: 5.14. Bypassing Filename Encoding
  - end: 181
    start: 179
    title: 5.15. Printing Bad Filenames
  - end: 183
    start: 181
    title: 5.16. Adding or Changing the Encoding of an Already Open File
  - end: 184
    start: 183
    title: 5.17. Writing Bytes to a Text File
  - end: 185
    start: 184
    title: 5.18. Wrapping an Existing File Descriptor As a File Object
  - end: 188
    start: 185
    title: 5.19. Making Temporary Files and Directories
  - end: 189
    start: 188
    title: 5.20. Communicating with Serial Ports
  - end: 193
    start: 189
    title: 5.21. Serializing Python Objects
  end: 193
  start: 159
  title: "Chapter\_5.\_Files and I/O"
- chapters:
  - end: 197
    start: 193
    title: 6.1. Reading and Writing CSV Data
  - end: 201
    start: 197
    title: 6.2. Reading and Writing JSON Data
  - end: 204
    start: 201
    title: 6.3. Parsing Simple XML Data
  - end: 207
    start: 204
    title: 6.4. Parsing Huge XML Files Incrementally
  - end: 209
    start: 207
    title: 6.5. Turning a Dictionary into XML
  - end: 211
    start: 209
    title: 6.6. Parsing, Modifying, and Rewriting XML
  - end: 213
    start: 211
    title: 6.7. Parsing XML Documents with Namespaces
  - end: 215
    start: 213
    title: 6.8. Interacting with a Relational Database
  - end: 217
    start: 215
    title: 6.9. Decoding and Encoding Hexadecimal Digits
  - end: 217
    start: 217
    title: 6.10. Decoding and Encoding Base64
  - end: 221
    start: 217
    title: 6.11. Reading and Writing Binary Arrays of Structures
  - end: 232
    start: 221
    title: 6.12. Reading Nested and Variable-Sized Binary Structures
  - end: 235
    start: 232
    title: 6.13. Summarizing Data and Performing Statistics
  end: 235
  start: 193
  title: "Chapter\_6.\_Data Encoding and Processing"
- chapters:
  - end: 237
    start: 235
    title: 7.1. Writing Functions That Accept Any Number of Arguments
  - end: 238
    start: 237
    title: 7.2. Writing Functions That Only Accept Keyword Arguments
  - end: 239
    start: 238
    title: 7.3. Attaching Informational Metadata to Function Arguments
  - end: 240
    start: 239
    title: 7.4. Returning Multiple Values from a Function
  - end: 242
    start: 240
    title: 7.5. Defining Functions with Default Arguments
  - end: 243
    start: 242
    title: 7.6. Defining Anonymous or Inline Functions
  - end: 245
    start: 243
    title: 7.7. Capturing Variables in Anonymous Functions
  - end: 249
    start: 245
    title: 7.8. Making an N-Argument Callable Work As a Callable with Fewer Arguments
  - end: 250
    start: 249
    title: 7.9. Replacing Single Method Classes with Functions
  - end: 253
    start: 250
    title: 7.10. Carrying Extra State with Callback Functions
  - end: 256
    start: 253
    title: 7.11. Inlining Callback Functions
  - end: 261
    start: 256
    title: 7.12. Accessing Variables Defined Inside a Closure
  end: 261
  start: 235
  title: "Chapter\_7.\_Functions"
- chapters:
  - end: 263
    start: 261
    title: 8.1. Changing the String Representation of Instances
  - end: 264
    start: 263
    title: 8.2. Customizing String Formatting
  - end: 266
    start: 264
    title: 8.3. Making Objects Support the Context-Management Protocol
  - end: 268
    start: 266
    title: 8.4. Saving Memory When Creating a Large Number of Instances
  - end: 269
    start: 268
    title: 8.5. Encapsulating Names in a Class
  - end: 274
    start: 269
    title: 8.6. Creating Managed Attributes
  - end: 278
    start: 274
    title: 8.7. Calling a Method on a Parent Class
  - end: 282
    start: 278
    title: 8.8. Extending a Property in a Subclass
  - end: 285
    start: 282
    title: 8.9. Creating a New Kind of Class or Instance Attribute
  - end: 288
    start: 285
    title: 8.10. Using Lazily Computed Properties
  - end: 292
    start: 288
    title: 8.11. Simplifying the Initialization of Data Structures
  - end: 295
    start: 292
    title: 8.12. Defining an Interface or Abstract Base Class
  - end: 301
    start: 295
    title: 8.13. Implementing a Data Model or Type System
  - end: 305
    start: 301
    title: 8.14. Implementing Custom Containers
  - end: 309
    start: 305
    title: 8.15. Delegating Attribute Access
  - end: 311
    start: 309
    title: 8.16. Defining More Than One Constructor in a Class
  - end: 312
    start: 311
    title: 8.17. Creating an Instance Without Invoking init
  - end: 317
    start: 312
    title: 8.18. Extending Classes with Mixins
  - end: 323
    start: 317
    title: 8.19. Implementing Stateful Objects or State Machines
  - end: 324
    start: 323
    title: 8.20. Calling a Method on an Object Given the Name As a String
  - end: 329
    start: 324
    title: 8.21. Implementing the Visitor Pattern
  - end: 335
    start: 329
    title: 8.22. Implementing the Visitor Pattern Without Recursion
  - end: 339
    start: 335
    title: 8.23. Managing Memory in Cyclic Data Structures
  - end: 341
    start: 339
    title: 8.24. Making Classes Support Comparison Operations
  - end: 347
    start: 341
    title: 8.25. Creating Cached Instances
  end: 347
  start: 261
  title: "Chapter\_8.\_Classes and Objects"
- chapters:
  - end: 349
    start: 347
    title: 9.1. Putting a Wrapper Around a Function
  - end: 351
    start: 349
    title: 9.2. Preserving Function Metadata When Writing Decorators
  - end: 352
    start: 351
    title: 9.3. Unwrapping a Decorator
  - end: 354
    start: 352
    title: 9.4. Defining a Decorator That Takes Arguments
  - end: 357
    start: 354
    title: 9.5. Defining a Decorator with User Adjustable Attributes
  - end: 359
    start: 357
    title: 9.6. Defining a Decorator That Takes an Optional Argument
  - end: 363
    start: 359
    title: 9.7. Enforcing Type Checking on a Function Using a Decorator
  - end: 365
    start: 363
    title: 9.8. Defining Decorators As Part of a Class
  - end: 368
    start: 365
    title: 9.9. Defining Decorators As Classes
  - end: 370
    start: 368
    title: 9.10. Applying Decorators to Class and Static Methods
  - end: 373
    start: 370
    title: 9.11. Writing Decorators That Add Arguments to Wrapped Functions
  - end: 374
    start: 373
    title: 9.12. Using Decorators to Patch Class Definitions
  - end: 377
    start: 374
    title: 9.13. Using a Metaclass to Control Instance Creation
  - end: 380
    start: 377
    title: 9.14. Capturing Class Attribute Definition Order
  - end: 382
    start: 380
    title: 9.15. Defining a Metaclass That Takes Optional Arguments
  - end: 385
    start: 382
    title: 9.16. Enforcing an Argument Signature on *args and **kwargs
  - end: 388
    start: 385
    title: 9.17. Enforcing Coding Conventions in Classes
  - end: 392
    start: 388
    title: 9.18. Defining Classes Programmatically
  - end: 394
    start: 392
    title: 9.19. Initializing Class Members at Definition Time
  - end: 400
    start: 394
    title: 9.20. Implementing Multiple Dispatch with Function Annotations
  - end: 402
    start: 400
    title: 9.21. Avoiding Repetitive Property Methods
  - end: 404
    start: 402
    title: 9.22. Defining Context Managers the Easy Way
  - end: 406
    start: 404
    title: 9.23. Executing Code with Local Side Effects
  - end: 410
    start: 406
    title: 9.24. Parsing and Analyzing Python Source
  - end: 415
    start: 410
    title: 9.25. Disassembling Python Byte Code
  end: 415
  start: 347
  title: "Chapter\_9.\_Metaprogramming"
- chapters:
  - end: 416
    start: 415
    title: 10.1. Making a Hierarchical Package of Modules
  - end: 417
    start: 416
    title: 10.2. Controlling the Import of Everything
  - end: 419
    start: 417
    title: 10.3. Importing Package Submodules Using Relative Names
  - end: 422
    start: 419
    title: 10.4. Splitting a Module into Multiple Files
  - end: 424
    start: 422
    title: 10.5. Making Separate Directories of Code Import Under a Common Namespace
  - end: 425
    start: 424
    title: 10.6. Reloading Modules
  - end: 426
    start: 425
    title: 10.7. Making a Directory or Zip File Runnable As a Main Script
  - end: 427
    start: 426
    title: 10.8. Reading Datafiles Within a Package
  - end: 429
    start: 427
    title: 10.9. Adding Directories to sys.path
  - end: 430
    start: 429
    title: 10.10. Importing Modules Using a Name Given in a String
  - end: 446
    start: 430
    title: 10.11. Loading Modules from a Remote Machine Using Import Hooks
  - end: 449
    start: 446
    title: 10.12. Patching Modules on Import
  - end: 450
    start: 449
    title: 10.13. Installing Packages Just for Yourself
  - end: 451
    start: 450
    title: 10.14. Creating a New Python Environment
  - end: 455
    start: 451
    title: 10.15. Distributing Packages
  end: 455
  start: 415
  title: "Chapter\_10.\_Modules and Packages"
- chapters:
  - end: 459
    start: 455
    title: 11.1. Interacting with HTTP Services As a Client
  - end: 463
    start: 459
    title: 11.2. Creating a TCP Server
  - end: 465
    start: 463
    title: 11.3. Creating a UDP Server
  - end: 467
    start: 465
    title: 11.4. Generating a Range of IP Addresses from a CIDR Address
  - end: 472
    start: 467
    title: 11.5. Creating a Simple REST-Based Interface
  - end: 474
    start: 472
    title: 11.6. Implementing a Simple Remote Procedure Call with XML-RPC
  - end: 476
    start: 474
    title: 11.7. Communicating Simply Between Interpreters
  - end: 479
    start: 476
    title: 11.8. Implementing Remote Procedure Calls
  - end: 482
    start: 479
    title: 11.9. Authenticating Clients Simply
  - end: 488
    start: 482
    title: 11.10. Adding SSL to Network Services
  - end: 493
    start: 488
    title: 11.11. Passing a Socket File Descriptor Between Processes
  - end: 499
    start: 493
    title: 11.12. Understanding Event-Driven I/O
  - end: 503
    start: 499
    title: 11.13. Sending and Receiving Large Arrays
  end: 503
  start: 455
  title: "Chapter\_11.\_Network and Web Programming"
- chapters:
  - end: 506
    start: 503
    title: 12.1. Starting and Stopping Threads
  - end: 509
    start: 506
    title: 12.2. Determining If a Thread Has Started
  - end: 515
    start: 509
    title: 12.3. Communicating Between Threads
  - end: 518
    start: 515
    title: 12.4. Locking Critical Sections
  - end: 522
    start: 518
    title: 12.5. Locking with Deadlock Avoidance
  - end: 523
    start: 522
    title: 12.6. Storing Thread-Specific State
  - end: 527
    start: 523
    title: 12.7. Creating a Thread Pool
  - end: 531
    start: 527
    title: 12.8. Performing Simple Parallel Programming
  - end: 534
    start: 531
    title: 12.9. Dealing with the GIL (and How to Stop Worrying About It)
  - end: 538
    start: 534
    title: 12.10. Defining an Actor Task
  - end: 542
    start: 538
    title: 12.11. Implementing Publish/Subscribe Messaging
  - end: 549
    start: 542
    title: 12.12. Using Generators As an Alternative to Threads
  - end: 552
    start: 549
    title: 12.13. Polling Multiple Thread Queues
  - end: 557
    start: 552
    title: 12.14. Launching a Daemon Process on Unix
  end: 557
  start: 503
  title: "Chapter\_12.\_Concurrency"
- chapters:
  - end: 558
    start: 557
    title: 13.1. Accepting Script Input via Redirection, Pipes, or Input Files
  - end: 559
    start: 558
    title: 13.2. Terminating a Program with an Error Message
  - end: 562
    start: 559
    title: 13.3. Parsing Command-Line Options
  - end: 563
    start: 562
    title: 13.4. Prompting for a Password at Runtime
  - end: 563
    start: 563
    title: 13.5. Getting the Terminal Size
  - end: 565
    start: 563
    title: 13.6. Executing an External Command and Getting Its Output
  - end: 567
    start: 565
    title: 13.7. Copying or Moving Files and Directories
  - end: 568
    start: 567
    title: 13.8. Creating and Unpacking Archives
  - end: 570
    start: 568
    title: 13.9. Finding Files by Name
  - end: 573
    start: 570
    title: 13.10. Reading Configuration Files
  - end: 576
    start: 573
    title: 13.11. Adding Logging to Simple Scripts
  - end: 577
    start: 576
    title: 13.12. Adding Logging to Libraries
  - end: 579
    start: 577
    title: 13.13. Making a Stopwatch Timer
  - end: 581
    start: 579
    title: 13.14. Putting Limits on Memory and CPU Usage
  - end: 583
    start: 581
    title: 13.15. Launching a Web Browser
  end: 583
  start: 557
  title: "Chapter\_13.\_Utility Scripting and System Administration"
- chapters:
  - end: 585
    start: 583
    title: 14.1. Testing Output Sent to stdout
  - end: 588
    start: 585
    title: 14.2. Patching Objects in Unit Tests
  - end: 590
    start: 588
    title: 14.3. Testing for Exceptional Conditions in Unit Tests
  - end: 591
    start: 590
    title: 14.4. Logging Test Output to a File
  - end: 592
    start: 591
    title: 14.5. Skipping or Anticipating Test Failures
  - end: 594
    start: 592
    title: 14.6. Handling Multiple Exceptions
  - end: 596
    start: 594
    title: 14.7. Catching All Exceptions
  - end: 598
    start: 596
    title: 14.8. Creating Custom Exceptions
  - end: 600
    start: 598
    title: 14.9. Raising an Exception in Response to Another Exception
  - end: 601
    start: 600
    title: 14.10. Reraising the Last Exception
  - end: 603
    start: 601
    title: 14.11. Issuing Warning Messages
  - end: 605
    start: 603
    title: 14.12. Debugging Basic Program Crashes
  - end: 608
    start: 605
    title: 14.13. Profiling and Timing Your Program
  - end: 615
    start: 608
    title: 14.14. Making Your Programs Run Faster
  end: 615
  start: 583
  title: "Chapter\_14.\_Testing, Debugging, and Exceptions"
- chapters:
  - end: 623
    start: 615
    title: 15.1. Accessing C Code Using ctypes
  - end: 627
    start: 623
    title: 15.2. Writing a Simple C Extension Module
  - end: 630
    start: 627
    title: 15.3. Writing an Extension Function That Operates on Arrays
  - end: 632
    start: 630
    title: 15.4. Managing Opaque Pointers in C Extension Modules
  - end: 637
    start: 632
    title: 15.5. Defining and Exporting C APIs from Extension Modules
  - end: 643
    start: 637
    title: 15.6. Calling Python from C
  - end: 643
    start: 643
    title: 15.7. Releasing the GIL in C Extensions
  - end: 645
    start: 643
    title: 15.8. Mixing Threads from C and Python
  - end: 650
    start: 645
    title: 15.9. Wrapping C Code with Swig
  - end: 656
    start: 650
    title: 15.10. Wrapping Existing C Code with Cython
  - end: 661
    start: 656
    title: 15.11. Using Cython to Write High-Performance Array Operations
  - end: 662
    start: 661
    title: 15.12. Turning a Function Pointer into a Callable
  - end: 666
    start: 662
    title: 15.13. Passing NULL-Terminated Strings to C Libraries
  - end: 671
    start: 666
    title: 15.14. Passing Unicode Strings to C Libraries
  - end: 672
    start: 671
    title: 15.15. Converting C Strings to Python
  - end: 675
    start: 672
    title: 15.16. Working with C Strings of Dubious Encoding
  - end: 676
    start: 675
    title: 15.17. Passing Filenames to C Extensions
  - end: 677
    start: 676
    title: 15.18. Passing Open Files to C Extensions
  - end: 680
    start: 677
    title: 15.19. Reading File-Like Objects from C
  - end: 681
    start: 680
    title: 15.20. Consuming an Iterable from C
  - end: 683
    start: 681
    title: 15.21. Diagnosing Segmentation Faults
  end: 683
  start: 615
  title: "Chapter\_15.\_C Extensions"
