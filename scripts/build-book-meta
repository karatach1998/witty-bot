#!/usr/bin/env python
# pylint: disable=import-error

import argparse
import re
from itertools import chain
from pathlib import Path

import yaml
from PyPDF2 import PdfFileReader

import config
from book_stores import BOOK_STORE_CONTAINER
from books import BookLocation


def build_location(file_url):
    schema = r'https?://'
    type_patterns = [
        (
            'gdrive', 'Google Drive',
            rf'({schema})?drive\.google\.com/file/d/(?P<file_id>.+)/.+'
        ),
        (
            'yadisk', 'Yandex Disk',
            rf'({schema})?disk\.yandex\.ru/client/disk(?P<path>.+)'
        ),
        ('url', 'URL', rf'(?P<url>{schema}.+)'),
    ]

    for type, name, pattern in type_patterns:  # pylint: disable=redefined-builtin
        m = re.match(pattern, file_url)
        if m:
            location = dict(type=type, extra=m.groupdict())
            return location, name
    raise ValueError(
        f'Cannot determine resource provider type from URL: {file_url}'
    )


def fetch_content(location):
    book_location = BookLocation.from_dict(location)
    store = BOOK_STORE_CONTAINER.get_store(book_location)
    return store.get_book_content(book_location)


def build_parts(pdf, page_overlap=True):
    parts = []
    for part, chapters, next_part in zip(
        pdf.outlines[:-2], pdf.outlines[1:-1], pdf.outlines[2:]
    ):
        if not isinstance(chapters, list):
            continue

        chapters = [ch for ch in chapters if not isinstance(ch, list)]
        chs = []
        # for ch, next_ch in zip(chapters, chain(chapters, (next_part,))):
        for ch, next_ch in zip(chapters, chain(chapters[1:], (next_part,))):
            chs.append({
                'title':
                ch.title,
                'start_page':
                pdf.getDestinationPageNumber(ch),
                'end_page':
                (pdf.getDestinationPageNumber(next_ch) - (not page_overlap)),
            })
        parts.append({
            'title':
            part.title,
            'start_page':
            pdf.getDestinationPageNumber(part),
            'end_page':
            (pdf.getDestinationPageNumber(next_part) - (not page_overlap)),
            'chapters':
            chs,
        })
    return parts


def print_parts(parts):
    for i, part in enumerate(parts, start=1):
        print(f"[{i:>2}]  {part['title']} ({part['start']}-{part['end']})")
        for j, ch in enumerate(part['chapters'], start=1):
            print(f"  [{j:>2}]  {ch['title']} ({ch['start']}-{ch['end']})")


def extract_table_of_content(pdf, offset=0, ignore_top_level=False):
    parts = []
    outlines = pdf.outlines
    if ignore_top_level:
        outlines = list(
            chain.from_iterable(
                filter(lambda x: isinstance(x, list), pdf.outlines)
            )
        )
    for part, part_chapters, next_part in zip(
        outlines[:-2], outlines[1:-1], outlines[2:]
    ):

        if isinstance(part, list):
            continue

        part_has_chapters = isinstance(part_chapters, list)
        chapters = []
        if part_has_chapters:
            part_chapters = [
                ch for ch in part_chapters if not isinstance(ch, list)
            ]
            for ch, next_ch in zip(
                part_chapters, chain(part_chapters[1:], (next_part,))
            ):
                chapters.append({
                    'title':
                    str(ch.title),
                    'start':
                    pdf.getDestinationPageNumber(ch) + 1 + offset,
                    'end':
                    pdf.getDestinationPageNumber(next_ch) + 1 + offset,
                })
        else:
            next_part = part_chapters

        part_info = {
            'title': str(part.title),
            'start': pdf.getDestinationPageNumber(part) + 1 + offset,
            'end': pdf.getDestinationPageNumber(next_part) + 1 + offset,
        }
        if chapters:
            chapters[0]['start'] = min(
                chapters[0]['start'], part_info['start']
            )
        part_info['chapters'] = chapters
        parts.append(part_info)
    return parts


def build_table_of_content(pdf, offset, ignore_top_level):
    parts = extract_table_of_content(pdf, offset, ignore_top_level)
    print("Detected table of content")
    print_parts(parts)

    total_chapters = sum(len(p['chapters']) for p in parts)
    if len(parts) >= total_chapters:
        print(
            f"Number of parts ({len(parts)}) >="
            f" total number of chapters ({total_chapters})"
        )
        choice = input(
            "Which table of content structure do yout prefer:"
            " [P]arts/chapters or only [C]hapters? "
        ).strip().upper()
        while choice[0] not in ('P', 'C'):
            choice = input("Enter P or C: ").strip().upper()
        only_chapters = (choice == 'C')
        parts = list(map(lambda p: p.pop('chapters') or p, parts))
    else:
        only_chapters = False
    return parts, only_chapters


def input_range():
    start, end = input('Outline range (<first>-<last>): ').split('-')
    return int(start), int(end)


def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('file_url', type=str)
    parser.add_argument('-O', '--output', type=str)
    parser.add_argument('--offset', type=int, default=0)
    parser.add_argument(
        '--ignore-top-level',
        action='store_true',
        help=(
            "ignore top level in table of content with"
            " next sctructure: part/chapter/section"
        )
    )
    parser.add_argument(
        '--no-page-overlap',
        dest='page_overlap',
        action='store_false',
        default=False,
        help=("do not overlap part's or chapter's end"
              " page with next one")
    )
    return parser


def main():
    parser = get_parser()
    args = parser.parse_args()

    try:
        location, location_name = build_location(args.file_url)
        print(
            f'Downloading file from {location_name} with ' + '%s: %s ...' %
            (list(filter(lambda x: x[0] != "type", location.items()))[0])
        )
        content = fetch_content(location)

        pdf = PdfFileReader(content)
        if pdf.documentInfo is not None and pdf.documentInfo.title:
            title = pdf.documentInfo.title
            print(f"Detected title: {title}")
        else:
            title = input("Enter the PDF title: ")
        title = title.strip()

        parts_or_chapters, only_chapters = build_table_of_content(
            pdf, args.offset, args.ignore_top_level
        )

        book_info = dict(title=title, location=location)
        if only_chapters:
            book_info['chapters'] = parts_or_chapters
        else:
            book_info['parts'] = parts_or_chapters
        output_path = Path(args.output or config.BOOKS_PATH / f'{title}.yaml')
        output_path.write_text(yaml.dump(book_info))
        print(f'Meta file written to {output_path}')
        print('Feel free to edit table of content in it.')
    except Exception as e:  # pylint: disable=broad-except
        print(e)
        exit(1)


if __name__ == '__main__':
    main()
